from flask import Flask, request, jsonify, render_template
import requests
import time

app = Flask(_name_)
API_KEY = 'edcb77511ffce3578aff6c00ba8fa8745d7c3ca8dba242060ba46569b3985560'

def format_result(data):
    print("Response data:", data)
    
    if 'data' in data and 'attributes' in data['data']:
        attributes = data['data']['attributes']
        stats = attributes.get('stats', {})
        results = attributes.get('results', {})
        
        total_scans = sum(stats.values())
        malicious = stats.get('malicious', 0)
        
        result = {
            'status': 'completed',
            'total_scans': total_scans,
            'malicious': malicious,
            'undetected': stats.get('undetected', 0),
            'vulnerable': malicious > 0,
            'sources': []
        }
        
        for engine, engine_result in results.items():
            result['sources'].append({
                'engine': engine,
                'category': engine_result.get('category', 'N/A'),
                'result': engine_result.get('result', 'N/A')
            })
        
        # Sort sources by category (malicious first) and then by engine name
        result['sources'].sort(key=lambda x: (x['category'] != 'malicious', x['engine']))
        
        return result
    else:
        return {'error': 'Invalid response structure'}

def get_scan_result(url, resource_id):
    max_attempts = 10
    for attempt in range(max_attempts):
        response = requests.get(url, headers={'x-apikey': API_KEY})
        response.raise_for_status()
        result = response.json()
        
        if result['data']['attributes']['status'] == 'completed':
            return result
        
        time.sleep(3)  # Wait for 3 seconds before trying again
    
    return {'error': 'Scan did not complete in time'}

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload_file', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'})
    try:
        files = {'file': (file.filename, file)}
        response = requests.post('https://www.virustotal.com/api/v3/files', headers={'x-apikey': API_KEY}, files=files)
        response.raise_for_status()
        
        file_id = response.json()['data']['id']
        result = get_scan_result(f'https://www.virustotal.com/api/v3/analyses/{file_id}', file_id)
        return jsonify(format_result(result))
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'Error communicating with VirusTotal API: {str(e)}'})
    except Exception as e:
        return jsonify({'error': f'Unexpected error: {str(e)}'})

@app.route('/scan_url', methods=['POST'])
def scan_url():
    url = request.form['url']
    try:
        response = requests.post('https://www.virustotal.com/api/v3/urls', headers={'x-apikey': API_KEY}, data={'url': url})
        response.raise_for_status()
        
        url_id = response.json()['data']['id']
        result = get_scan_result(f'https://www.virustotal.com/api/v3/analyses/{url_id}', url_id)
        return jsonify(format_result(result))
    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'Error communicating with VirusTotal API: {str(e)}'})
    except Exception as e:
        return jsonify({'error': f'Unexpected error: {str(e)}'})

if _name_ == '_main_':
    app.run(debug=True)